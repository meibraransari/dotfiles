###################
##    Docker     ##
###################
dhp() {
  echo "dpl = docker pull"
  echo "dis = docker images"
  echo "drn = docker run -itd 2=name 2=image"
  echo "dps = docker ps -a"
  echo "dpsi = list running containers with image"
  echo "dpsia = list all containers with image"
  echo "dpi = Formatted by Ibrar"
  echo "dpp = Formatted ports"
  echo "dsp = docker stop"
  echo "dspa = docker stop All"
  echo "dst = docker start"
  echo "drt = docker restart"
  echo "dre = docker rename"
  echo "dec = docker exec -it"
  echo "dls = docker logs"
  echo "drm = docker rm -f"
  echo "dri = docker rmi -f"
  echo "dit = docker inspect"
  echo "dvl = docker volume ls"
  echo "dss = docker stats"
  echo "dsd = Check disk space used by docker"
  echo "drs = docker remove exited containers only"
  echo "dhy = docker history"
  echo "ddi = docker remove dangling image"
  echo "durn = docker update --restart=no <Container>"
  echo "dura = docker update --restart=always <Container>"
  echo "dcr = docker inspect restart policy"
}

alias dps="docker ps -a"
alias dpe='clear && docker ps -a -f "status=exited"'
alias dpi='clear >$(tty) && echo -e "List of running containers" && docker ps --format "table {{.ID}}\t{{.RunningFor}}\t{{.Status}}\t{{.Image}}\t{{.Names}}"'
alias dpp='clear >$(tty) && docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Ports}}"'
alias dpia='clear >$(tty) && docker ps --format "table {{.Names}}\t{{.ID}}\t{{.Status}}\t{{.Ports}}\t{{.Image}}\t{{.Command}}\{{.RunningFor}}\{{.Status}}"'
alias dpsi='clear >$(tty) && docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}"'
alias dpsia='clear >$(tty) && docker ps -a --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}"'
alias dpl="docker pull $1"
alias dis="docker images"
alias drn="docker run -itd $1 $2"
alias dsp="docker stop $1"
alias dspa='docker stop $(docker ps -aq)'
alias dst="docker start $1"
alias drt="docker restart $1"
alias dre="docker rename $1"
alias dls="docker logs -fn 20 $1"
alias drm="docker rm $1 -f"
alias dri="docker rmi $1 -f"
alias dit="docker inspect $1"
alias dvl="docker volume ls"
alias dsd="docker system df -v"
alias dss="docker stats"
alias drs='docker rm $(docker ps -q -f status=exited) -f'
alias dhy="docker history $1"
alias ddi='docker rmi $(docker images --filter "dangling=true" -q --no-trunc)'
alias durn="docker update --restart=no $1"
alias dura="docker update --restart=always $1"
alias dcr="docker ps -aq | xargs docker inspect --format '{{.Name}} Restart: {{ .HostConfig.RestartPolicy.Name }}'"

dec() {
  docker exec -it "$@" bash
}

decx() {
  docker exec -it "$@" sh
}

docker_advantages() {
    echo "Advantages of Docker:"
    echo "1. Consistency: Docker containers encapsulate everything an application needs to run, ensuring consistent behavior across environments."
    echo "2. Isolation: Containers provide process and filesystem isolation, making applications secure and less prone to conflicts."
    echo "3. Portability: Docker containers can run on any machine with Docker installed, regardless of OS or hardware, simplifying deployment."
    echo "4. Efficiency: Docker containers are lightweight compared to VMs, with faster startup times and lower overhead."
    echo "5. Scalability: Docker's architecture allows easy scaling by spinning up multiple containers to manage varying workloads."
    echo "6. Version control and sharing: Docker images can be version-controlled and shared through registries like Docker Hub, enabling collaboration."
    echo "7. Ecosystem: Docker has tools like Docker Compose for multi-container apps and Docker Swarm for orchestration, enhancing its functionality."
}


docker_copy() {
    echo # Host to container
    echo docker cp /path/to/local/file.txt CONTAINER_ID:/path/in/container/file.txt
    echo docker cp /home/user/data.txt mycontainer:/data/data.txt

    echo # Container to Host
    echo docker cp CONTAINER_ID:/path/in/container/file.txt /path/to/local/file.txt
    echo docker cp mycontainer:/data/data.txt /home/user/data.txt
}


docker_clean_dangling_builder() {
  docker rmi $(docker images -f "dangling=true" -q)
  docker builder prune --force
  docker buildx prune -f
}



