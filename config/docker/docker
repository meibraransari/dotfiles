###################
##    Docker     ##
###################
dhp() {
  echo "dpl = docker pull"
  echo "dis = docker images"
  echo "drn = docker run -itd 2=name 2=image"
  echo "dps = docker ps -a"
  echo "dpsi = list running containers with image"
  echo "dpsia = list all containers with image"
  echo "dpi = Formatted by Ibrar"
  echo "dpp = Formatted ports"
  echo "dsp = docker stop"
  echo "dspa = docker stop All"
  echo "dst = docker start"
  echo "drt = docker restart"
  echo "dre = docker rename"
  echo "dec = docker exec -it"
  echo "dls = docker logs"
  echo "drm = docker rm -f"
  echo "dri = docker rmi -f"
  echo "dit = docker inspect"
  echo "dvl = docker volume ls"
  echo "dss = docker stats"
  echo "dsd = Check disk space used by docker"
  echo "drs = docker remove exited containers only"
  echo "dhy = docker history"
  echo "ddi = docker remove dangling image"
  echo "durn = docker update --restart=no <Container>"
  echo "dura = docker update --restart=always <Container>"
  echo "dcr = docker inspect restart policy"
  echo "dclean = Clean all running + stopped containers forcefully"
  echo "diclean = Delete all images forcefully"
  echo "dvclean = Delete all volumes forcefully"
  echo "dclean_all = Clean all docker (containers, images, volumes and networks"
  echo "docker_clean_dangling_builder  = docker_clean_dangling_builder"
  echo "docker_copy = docker_copy"
  echo "docker_advantages = docker_advantages"
  echo "pull_demo_images = pull_demo_images" 
  echo "volume_export_import = volume_export_import"
}

alias dps="docker ps -a"
alias dpe='clear && docker ps -a -f "status=exited"'
alias dpi='clear >$(tty) && echo -e "List of running containers" && docker ps --format "table {{.ID}}\t{{.RunningFor}}\t{{.Status}}\t{{.Image}}\t{{.Names}}"'
alias dpp='clear >$(tty) && docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Ports}}"'
alias dpia='clear >$(tty) && docker ps --format "table {{.Names}}\t{{.ID}}\t{{.Status}}\t{{.Ports}}\t{{.Image}}\t{{.Command}}\{{.RunningFor}}\{{.Status}}"'
alias dpsi='clear >$(tty) && docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}"'
alias dpsia='clear >$(tty) && docker ps -a --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}"'
alias dpl="docker pull $1"
alias dis="docker images"
alias drn="docker run -itd $1 $2"
alias dsp="docker stop $1"
alias dspa='docker stop $(docker ps -aq)'
alias dst="docker start $1"
alias drt="docker restart $1"
alias dre="docker rename $1"
alias dls="docker logs -fn 20 $1"
alias drm="docker rm $1 -f"
alias dri="docker rmi $1 -f"
alias dit="docker inspect $1"
alias dvl="docker volume ls"
alias dsd="docker system df -v"
alias dss="docker stats"
alias drs='docker rm $(docker ps -q -f status=exited) -f'
alias dhy="docker history $1"
alias ddi='docker rmi $(docker images --filter "dangling=true" -q --no-trunc)'
alias durn="docker update --restart=no $1"
alias dura="docker update --restart=always $1"
alias dcr="docker ps -aq | xargs docker inspect --format '{{.Name}} Restart: {{ .HostConfig.RestartPolicy.Name }}'"
alias dclean='docker rm -f $(docker ps -aq)'
alias diclean='docker rmi -f $(docker images -q)'
alias dvclean='docker volume rm -f $(docker volume ls -q)'

dclean_all() {
  echo "Stopping all containers..."
  docker stop $(docker ps -aq) 2>/dev/null

  echo "Removing all containers..."
  docker rm -f $(docker ps -aq) 2>/dev/null

  echo "Removing all images..."
  docker rmi -f $(docker images -q) 2>/dev/null

  echo "Removing all volumes..."
  docker volume rm -f $(docker volume ls -q) 2>/dev/null

  echo "Removing all networks (except default ones)..."
  docker network rm $(docker network ls | grep -vE 'bridge|host|none' | awk '{print $1}') 2>/dev/null

  echo "Pruning builder cache..."
  docker builder prune -af

  echo "Docker system fully cleaned."
}


dec() {
  docker exec -it "$@" bash
}

decx() {
  docker exec -it "$@" sh
}

docker_advantages() {
    echo "Advantages of Docker:"
    echo "1. Consistency: Docker containers encapsulate everything an application needs to run, ensuring consistent behavior across environments."
    echo "2. Isolation: Containers provide process and filesystem isolation, making applications secure and less prone to conflicts."
    echo "3. Portability: Docker containers can run on any machine with Docker installed, regardless of OS or hardware, simplifying deployment."
    echo "4. Efficiency: Docker containers are lightweight compared to VMs, with faster startup times and lower overhead."
    echo "5. Scalability: Docker's architecture allows easy scaling by spinning up multiple containers to manage varying workloads."
    echo "6. Version control and sharing: Docker images can be version-controlled and shared through registries like Docker Hub, enabling collaboration."
    echo "7. Ecosystem: Docker has tools like Docker Compose for multi-container apps and Docker Swarm for orchestration, enhancing its functionality."
}


docker_copy() {
    echo # Host to container
    echo docker cp /path/to/local/file.txt CONTAINER_ID:/path/in/container/file.txt
    echo docker cp /home/user/data.txt mycontainer:/data/data.txt

    echo # Container to Host
    echo docker cp CONTAINER_ID:/path/in/container/file.txt /path/to/local/file.txt
    echo docker cp mycontainer:/data/data.txt /home/user/data.txt
}


docker_clean_dangling_builder() {
  docker rmi $(docker images -f "dangling=true" -q)
  docker builder prune --force
  docker buildx prune -f
}



pull_demo_images() {
  local images=(
    "ibraransaridocker/network-debug-tools:latest"
    "ibraransaridocker/whoami:latest"
    "ibraransaridocker/coming-soon:latest"
    "ibraransaridocker/under-maintenance:latest"
    "ibraransaridocker/nginx-demo:latest"
    "ibraransaridocker/dotfiles:latest"
  )

  for image in "${images[@]}"; do
    echo "Pulling $image..."
    docker pull "$image"
  done

  echo "All images pulled successfully."
}





volume_export_import() {
  BUSYBOX_IMAGE=${BUSYBOX_IMAGE:-busybox}

  check_busybox() {
    if ! docker image inspect "$BUSYBOX_IMAGE" >/dev/null 2>&1; then
      echo >&2 "error: $BUSYBOX_IMAGE image not found. Downloading it."
      docker pull "$BUSYBOX_IMAGE"
    fi
  }

  case "$1" in
    export)
      VOLUME_NAME="$2"
      OUTPUT_FILE="${3:-$VOLUME_NAME.tar.gz}"
      
      if [ -z "$VOLUME_NAME" ]; then
        echo >&2 "error: volume name is required"
        return 1
      fi
      
      check_busybox
      docker run --rm -v "$VOLUME_NAME":/_data:ro "$BUSYBOX_IMAGE" tar czf - -C / _data > "$OUTPUT_FILE"
      echo "Volume '$VOLUME_NAME' exported to '$OUTPUT_FILE'"
      ;;

    import)
      VOLUME_NAME="$2"
      INPUT_FILE="$3"
      
      if [ -z "$VOLUME_NAME" ] || [ -z "$INPUT_FILE" ]; then
        echo >&2 "error: volume name and input file are required"
        return 1
      fi

      check_busybox
      docker volume create "$VOLUME_NAME" >/dev/null
      docker run --rm -i -v "$VOLUME_NAME":/_data:rw "$BUSYBOX_IMAGE" tar xzf - -C / < "$INPUT_FILE"
      echo "Imported '$INPUT_FILE' into volume '$VOLUME_NAME'"
      ;;

    *)
      echo >&2 "usage: volume_export_import export <volume-name> [output.tar.gz]"
      echo >&2 "       volume_export_import import <volume-name> [input.tar.gz]"
      return 1
      ;;
  esac
}


