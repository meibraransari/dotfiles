#=======================================
#     Install app
#=======================================
alias update="sudo apt-get update -y"
alias upgrade="sudo apt-get dist-upgrade -y && sudo aptitude safe-upgrade -y"
alias upgrade_kernel="uname -r && sudo apt-get update -y && sudo apt install linux-image-generic && echo "Reboot system to take effect""
alias clean="sudo apt-get autoremove -y && sudo apt-get clean -y && sudo apt-get autoclean -y && sudo apt-get -f install -y && sudo dpkg --configure -a && sudo journalctl --rotate && sudo journalctl --vacuum-size=0"

install() {
    sudo apt install "$@" -y
}
remove() {
    sudo apt purge "$@" -y
}
install_basic_app() {
    sudo apt update -y && sudo apt install -y tree iotop sysstat mc vim nano tldr zip unzip vim jq screen htop atop iotop sysstat ioping tcptrack traceroute dnsutils pinfo speedtest-cli net-tools iptraf iptraf-ng ncdu aptitude
}

upgrade_os() {
    #!/bin/bash
    # Check if script is run as root
    if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root" 1>&2
    exit 1
    fi
    # Perform update and upgrade
    apt update -y
    apt upgrade -y
    # Run distribution upgrade
    echo "Running do-release-upgrade..."
    do-release-upgrade
}

# Function to install Kubernetes (kubectl)
install_kubectl() {
  echo "Installing Kubernetes (kubectl)..."
  sudo apt-get update
  sudo apt-get install -y apt-transport-https ca-certificates curl
  sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
  echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
  sudo apt-get update
  sudo apt-get install -y kubectl
  echo "Kubernetes (kubectl) installed successfully."
}

# Function to install Ansible
install_ansible() {
  echo "Installing Ansible..."
  sudo apt-get update
  sudo apt-get install -y software-properties-common
  sudo add-apt-repository --yes --update ppa:ansible/ansible
  sudo apt-get update
  sudo apt-get install -y ansible
  echo "Ansible installed successfully."
}

# Function to install Terraform
install_terraform() {
  echo "Installing Terraform..."
  sudo apt-get update
  sudo apt-get install -y gnupg software-properties-common curl
  curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
  echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
  sudo apt-get update
  sudo apt-get install -y terraform
  echo "Terraform installed successfully."
}

# Function to install Jenkins
install_jenkins() {
  echo "Installing Jenkins..."
  sudo apt-get update
  sudo apt-get install -y openjdk-11-jdk
  curl -fsSL https://pkg.jenkins.io/debian/jenkins.io.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
  echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
  sudo apt-get update
  sudo apt-get install -y jenkins
  sudo systemctl start jenkins
  sudo systemctl enable jenkins
  echo "Jenkins installed successfully."
}

# Function to install AWS CLI
install_awscli() {
  echo "Installing AWS CLI..."
  sudo apt-get update
  sudo apt-get install -y awscli
  echo "AWS CLI installed successfully."
}

# Function to install Azure CLI
install_azurecli() {
  echo "Installing Azure CLI..."
  curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
  echo "Azure CLI installed successfully."
}

# Function to install Google Cloud SDK
install_gcloud() {
  echo "Installing Google Cloud SDK..."
  echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
  sudo apt-get update
  sudo apt-get install -y google-cloud-sdk
  echo "Google Cloud SDK installed successfully."
}

# Function to install Helm
install_helm() {
  echo "Installing Helm..."
  curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
  sudo apt-get install -y apt-transport-https
  echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
  sudo apt-get update
  sudo apt-get install -y helm
  echo "Helm installed successfully."
}

# Function to install Prometheus
install_prometheus() {
  echo "Installing Prometheus..."
  sudo useradd -M -r -s /bin/false prometheus
  sudo mkdir /etc/prometheus /var/lib/prometheus
  sudo chown prometheus:prometheus /etc/prometheus /var/lib/prometheus
  curl -s https://api.github.com/repos/prometheus/prometheus/releases/latest | grep browser_download_url | grep linux-amd64.tar.gz | cut -d '"' -f 4 | wget -qi -
  tar xvf prometheus-*.tar.gz
  sudo cp prometheus-*/prometheus prometheus-*/promtool /usr/local/bin/
  sudo cp -r prometheus-*/consoles prometheus-*/console_libraries /etc/prometheus/
  sudo cp prometheus-*/prometheus.yml /etc/prometheus/prometheus.yml
  sudo chown -R prometheus:prometheus /etc/prometheus /var/lib/prometheus
  echo "Prometheus installed successfully."
}

# Function to install Grafana
install_grafana() {
  echo "Installing Grafana..."
  sudo apt-get update
  sudo apt-get install -y software-properties-common
  sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
  sudo apt-get update
  sudo apt-get install -y grafana
  sudo systemctl start grafana-server
  sudo systemctl enable grafana-server
  echo "Grafana installed successfully."
}

# Function to install GitLab Runner
install_gitlab_runner() {
  echo "Installing GitLab Runner..."
  curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64
  sudo chmod +x /usr/local/bin/gitlab-runner
  sudo useradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash
  sudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner
  sudo gitlab-runner start
  echo "GitLab Runner installed successfully."
}

# Function to install HashiCorp Vault
install_vault() {
  echo "Installing HashiCorp Vault..."
  curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
  echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
  sudo apt-get update
  sudo apt-get install -y vault
  echo "Vault installed successfully."
}

# Function to install HashiCorp Consul
install_consul() {
  echo "Installing HashiCorp Consul..."
  curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
  echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
  sudo apt-get update
  sudo apt-get install -y consul
  echo "Consul installed successfully."
}

# Define the function to upgrade Jenkins
upgrade_jenkins() {
    #!/bin/bash
    local JENKINS_WAR_PATH="/usr/share/java/jenkins.war"
    local BACKUP_PATH="/usr/share/java/backup/"
    local TIMESTAMP=$(date +%F-%H-%M)

    # Check if the file exists
    if [ -f "$JENKINS_WAR_PATH" ]; then
        echo "Jenkins found."
        # Add your commands here that should run if the file exists
    else
        echo "Jenkins not found. Aborting"
        exit 1
    fi

    echo "Starting Jenkins upgrade..."

    # Stop the Jenkins service
    echo "Stopping Jenkins service..."
    sudo service jenkins stop
    if [ $? -ne 0 ]; then
        echo "Error stopping Jenkins service."
        return 1
    fi

    # Create backup directory if it doesn't exist
    sudo mkdir -p "$BACKUP_PATH"

    # Backup the current Jenkins WAR file
    echo "Backing up the current Jenkins WAR file..."
    sudo mv "$JENKINS_WAR_PATH" "$BACKUP_PATH/jenkins.war.$TIMESTAMP"
    if [ $? -ne 0 ]; then
        echo "Error backing up the Jenkins WAR file."
        return 1
    fi

    # Remove any existing Jenkins WAR backup file
    echo "Removing any existing Jenkins WAR backup..."
    sudo rm -f "$JENKINS_WAR_PATH.1" > /dev/null 2>&1

    # Download the latest Jenkins WAR file
    echo "Downloading the latest Jenkins WAR file..."
    sudo wget -q -O "$JENKINS_WAR_PATH" https://updates.jenkins-ci.org/latest/jenkins.war
    if [ $? -ne 0 ]; then
        echo "Error downloading Jenkins WAR file."
        return 1
    fi

    # Start Jenkins service
    echo "Starting Jenkins service..."
    sudo service jenkins start
    if [ $? -ne 0 ]; then
        echo "Error starting Jenkins service."
        return 1
    fi

    # Check Jenkins service status
    echo "Checking Jenkins service status..."
    if sudo service jenkins status | grep -q "running"; then
        echo "Jenkins service is running correctly."
    else
        echo "Jenkins service is not running correctly."
        return 1
    fi
    if [ $? -ne 0 ]; then
        echo "Upgrade failed. Please check the output above."
        exit 1
    fi
    # List files to verify
    # echo "Listing files in /usr/share/java:"
    # ls -alsh /usr/share/java

    echo "Jenkins upgrade completed successfully!"
}

# Call the function
# upgrade_jenkins
