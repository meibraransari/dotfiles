#=======================================
#    Ibrar Ansari Path
#=======================================
export IROOT=/ansari
export IHOME=/home/iansari

# Case-insensitive globbing (used in pathname expansion)
#shopt -s nocaseglob

# Autocorrect typos in path names when using `cd`
#shopt -s cdspell

# This will ensure that multiple line commands stay together in your history.
#shopt -s cmdhist

# # Auto update dotfiles
# # Check if the dotfiles repository exists
# function autoupdate() {
# # current_dir=$(pwd)
# if [ -d "$HOME/bin/dotfiles" ]; then
#     # Change directory to dotfiles
#     cd "$HOME/bin/dotfiles"

#     # Fetch the latest changes from the Git repository silently
#     git fetch origin main

#     # Compare the local branch with the remote branch
#     LOCAL=$(git rev-parse @)
#     REMOTE=$(git rev-parse @{u})
# 	#echo $LOCAL
# 	#echo $REMOTE
#     if [ "$LOCAL" != "$REMOTE" ]; then
#         # Pull the latest changes from the Git repository silently if updates are available
#         git pull
# 	fi
# fi
# # cd "$current_dir"
# source ~/.bash_profile
# }
# # autoupdate &


# Auto update dotfiles new one
function autoupdate() {
    current_dir=$(pwd)
    if [ -d "$HOME/bin/dotfiles" ]; then
        cd ~/bin/dotfiles && git pull
    fi
    cd "$current_dir" &> /dev/null
    #source ~/.bash_profile
}
autoupdate

# Update dot files
# alias update_dotfiles='current_dir=$(pwd); clear >$(tty) && cd ~/bin/dotfiles && git pull && cd "$current_dir" && source ~/.bash_profile'
# Auto update dotfiles new one
function update_dotfiles() {
    current_dir=$(pwd)
    if [ -d "$HOME/bin/dotfiles" ]; then
        cd ~/bin/dotfiles && git pull
    fi
    cd "$current_dir" &> /dev/null
    #source ~/.bash_profile
}

# Uninstall dot files
alias uninstall_dotfiles='current_dir=$(pwd); clear >$(tty) && rm -rf ~/bin && sed -i "/\. ~\/bin\/dotfiles\/bashrc/d" ~/.bashrc && bash && cd "$current_dir" && source ~/.bash_profile && bash'

unalias docs &> /dev/null # unalias any alias
alias reload='source ~/.bash_profile && source ~/.bashrc'
alias help_linux="grep 'alias' ~/bin/dotfiles/linux/linux | sed 's/alias //'"
alias help_docker="grep 'alias' ~/bin/dotfiles/docker/docker | sed 's/alias //'"
alias help_git="grep 'alias' ~/bin/dotfiles/git/git | sed 's/alias //'"
alias help_k8s="grep 'alias' ~/bin/dotfiles/kubernetes/kubernetes | sed 's/alias //'"
alias help_ansible="grep 'alias' ~/bin/dotfiles/ansible/ansible | sed 's/alias //'"
alias help_compose="grep 'alias' ~/bin/dotfiles/docker/docker_compose | sed 's/alias //'"
alias help_pm2="grep 'alias' ~/bin/dotfiles/pm2/pm2 | sed 's/alias //'"

function pwdgen() {
#=======================================
# Password generator with lenght option
#=======================================
NOCOLOR='\e[0m'
BOLD='\e[1m'
BLINK='\e[5m'
Blue='\e[44m'

# Ask user for the string length
clear
printf "\n"
read -p "How many characters you would like the password to have? " pass_lenght
printf "\n"

# This is where the magic happens!
# Generate a list of 10 strings and cut it to the desired value provided from the user
#for i in {1..10}; do (tr -cd '[:alnum:]' < /dev/urandom | fold -w${pass_lenght} | head -n 1); done
#tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c ${pass_lenght}  ; echo

for i in {1..10}; do (tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c ${pass_lenght}  ; echo); done

# Print the strings
echo ""
echo -e "${Blue}${BLINK}${BOLD}Goodbye, ${USER}${NOCOLOR}"
echo ""
echo ""
}

function pwdgen_sql() {
#=======================================
# Password generator for mysql
#=======================================
NOCOLOR='\e[0m'
BOLD='\e[1m'
BLINK='\e[5m'
Blue='\e[44m'

# Ask user for the string length
clear
printf "\n"
read -p "How many characters you would like the password to have? " pass_lenght
printf "\n"

# This is where the magic happens!
# Generate a list of 10 strings and cut it to the desired value provided from the user
#for i in {1..10}; do (tr -cd '[:alnum:]' < /dev/urandom | fold -w${pass_lenght} | head -n 1); done
#tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c ${pass_lenght}  ; echo
for i in {1..10}; do (tr -dc 'A-Za-z0-9:@.,/+!=-' </dev/urandom | head -c ${pass_lenght}  ; echo); done

# Print the strings
echo ""
echo -e "${Blue}${BLINK}${BOLD}Goodbye, ${USER}${NOCOLOR}"
echo ""
echo ""
}



##!/bin/bash
#
#svc_custom() {
#    excluded_patterns=(
#        "^accounts-daemon\.service$" "^atd\.service$" "^cron\.service$" "^dbus\.service$"
#        "^getty@tty1\.service$" "^irqbalance\.service$" "^ModemManager\.service$"
#        "^multipathd\.service$" "^networkd-dispatcher\.service$" "^open-vm-tools\.service$"
#        "^polkit\.service$" "^rsyslog\.service$" "^snapd\.service$" "^ssh\.service$"
#        "^systemd-journald\.service$" "^systemd-logind\.service$" "^systemd-networkd\.service$"
#        "^systemd-resolved\.service$" "^systemd-timesyncd\.service$" "^systemd-udevd\.service$"
#        "^udisks2\.service$" "^unattended-upgrades\.service$" "^upower\.service$"
#        "^user@1000\.service$" "^uuidd\.service$" "^vgauth\.service$"
#        "^apparmor\.service$" "^apport\.service$" "^blk-availability\.service$"
#        "^cloud-config\.service$" "^cloud-final\.service$" "^cloud-init-local\.service$"
#        "^cloud-init\.service$" "^console-setup\.service$" "^finalrd\.service$"
#        "^fwupd\.service$" "^keyboard-setup\.service$" "^kmod-static-nodes\.service$"
#        "^lvm2-monitor\.service$" "^packagekit\.service$" "^setvtrgb\.service$"
#        "^snapd\.apparmor\.service$" "^snapd\.seeded\.service$" "^sysstat\.service$"
#        "^systemd-journal-flush\.service$" "^systemd-modules-load\.service$"
#        "^systemd-networkd-wait-online\.service$" "^systemd-random-seed\.service$"
#        "^systemd-remount-fs\.service$" "^systemd-sysctl\.service$"
#        "^systemd-sysusers\.service$" "^systemd-tmpfiles-setup-dev\.service$"
#        "^systemd-tmpfiles-setup\.service$" "^systemd-udev-settle\.service$"
#        "^systemd-udev-trigger\.service$" "^systemd-update-utmp\.service$"
#        "^systemd-user-sessions\.service$" "^ubuntu-fan\.service$" "^ufw\.service$"
#        "^user-runtime-dir@1000\.service$" "^plymouth-quit-wait\.service$"
#        "^plymouth-quit\.service$" "^plymouth-read-write\.service$"
#        "^systemd-binfmt\.service$" "^systemd-tmpfiles-setup-dev-early\.service$"
#        "^chrony\.service$" "^serial-getty@ttyS0\.service$" "^systemd-fsck-root\.service$"
#        "^systemd-fsck@dev-disk-by-.*\.service$" "^systemd-machine-id-commit\.service$"
#        "^google-guest-agent\.service$" "^google-osconfig-agent\.service$" "^google-shutdown-scripts\.service$"
#        "^ensure-gss-startup-order\.service$" "^acpid\.service$" "^snap\.amazon-ssm-agent\.amazon-ssm-agent\.service$"
#        "^alsa-restore\.service$" "^avahi-daemon\.service$" "^cups-browsed\.service$" "^cups\.service$" "^gdm\.service$"
#        "^kerneloops\.service$" "^NetworkManager-wait-online\.service$" "^NetworkManager\.service$" "^openvpn\.service$"
#        "^plymouth-start\.service$" "^power-profiles-daemon\.service$" "^rtkit-daemon\.service$" "^switcheroo-control\.service$"
#        "^systemd-oomd\.service$" "^thermald\.service$" "^wpa_supplicant\.service$"
#        "^named\.service$" "^systemd-*\.service$" "^systemd*" "^touchegg*"
#    )
#
#    active_services=$(systemctl list-units --state=active --type=service --no-pager --no-legend | awk '{print $1}')
#
#    for service in $active_services; do
#        excluded=false
#        for pattern in "${excluded_patterns[@]}"; do
#            if [[ $service =~ $pattern ]]; then
#                excluded=true
#                break
#            fi
#        done
#
#        if [[ $excluded == false ]]; then
#            echo "$service"
#        fi
#    done
#}
#
## Call the function to list active services except those excluded
##svc_custom

#!/bin/bash

svc_custom() {
    excluded_patterns=(
        "^accounts-daemon*" "^atd*" "^cron*" "^dbus*"
        "^getty@tty1*" "^irqbalance*" "^ModemManager*"
        "^multipathd*" "^networkd-dispatcher*" "^open-vm-tools*"
        "^polkit*" "^rsyslog*" "^snapd*" "^ssh*"
        "^systemd-journald*" "^systemd-logind*" "^systemd-networkd*"
        "^systemd-resolved*" "^systemd-timesyncd*" "^systemd-udevd*"
        "^udisks2*" "^unattended-upgrades*" "^upower*"
        "^user@1000*" "^uuidd*" "^vgauth*"
        "^apparmor*" "^apport*" "^blk-availability*"
        "^cloud-config*" "^cloud-final*" "^cloud-init-local*"
        "^cloud-init*" "^console-setup*" "^finalrd*"
        "^fwupd*" "^keyboard-setup*" "^kmod-static-nodes*"
        "^lvm2-monitor*" "^packagekit*" "^setvtrgb*"
        "^snapd\.apparmor*" "^snapd\.seeded*" "^sysstat*"
        "^systemd-journal-flush*" "^systemd-modules-load*"
        "^systemd-networkd-wait-online*" "^systemd-random-seed*"
        "^systemd-remount-fs*" "^systemd-sysctl*"
        "^systemd-sysusers*" "^systemd-tmpfiles-setup-dev*"
        "^systemd-tmpfiles-setup*" "^systemd-udev-settle*"
        "^systemd-udev-trigger*" "^systemd-update-utmp*"
        "^systemd-user-sessions*" "^ubuntu-fan*" "^ufw*"
        "^user-runtime-dir@1000*" "^plymouth-quit-wait*"
        "^plymouth-quit*" "^plymouth-read-write*"
        "^systemd-binfmt*" "^systemd-tmpfiles-setup-dev-early*"
        "^chrony*" "^serial-getty@ttyS0*" "^systemd-fsck-root*"
        "^systemd-fsck@dev-disk-by-.**" "^systemd-machine-id-commit*"
        "^google-guest-agent*" "^google-osconfig-agent*" "^google-shutdown-scripts*"
        "^ensure-gss-startup-order*" "^acpid*" "^snap\.amazon-ssm-agent\.amazon-ssm-agent*"
        "^alsa-restore*" "^avahi-daemon*" "^cups-browsed*" "^cups*" "^gdm*"
        "^kerneloops*" "^NetworkManager-wait-online*" "^NetworkManager*" "^openvpn*"
        "^plymouth-start*" "^power-profiles-daemon*" "^rtkit-daemon*" "^switcheroo-control*"
        "^systemd-oomd*" "^thermald*" "^wpa_supplicant*" "^ifup*" "^ifupdown*" "^networking*"
        "^named*" "^systemd-**" "^systemd*" "^touchegg*" "^rc-local*" "^user-runtime*" "^user*" 
    )

    active_services=$(systemctl list-units --state=active --type=service --no-pager --no-legend | awk '{print $1}')

    for service in $active_services; do
        excluded=false
        for pattern in "${excluded_patterns[@]}"; do
            if [[ $service =~ $pattern ]]; then
                excluded=true
                break
            fi
        done

        if [[ $excluded == false ]]; then
            echo "$service"
        fi
    done
}

# Call the function to list active services except those excluded
#svc_custom



# Define the adjusted function
cron_list() {
    USERS=$(sudo cut -d: -f1 /etc/passwd)
    for USER in $USERS; do
        echo "=== Crontab for $USER ==="
        sudo crontab -u $USER -l 2>/dev/null | grep -v '^#'
        echo ""
    done
}

# Call the function
#cron_list

# Define the function
cron_list_system() {
    echo "=== System Crontabs ==="

    for FILE in /etc/cron.d/* /etc/cron.daily/* /etc/cron.hourly/* /etc/cron.monthly/* /etc/cron.weekly/*; do
        if [ -f "$FILE" ]; then
            echo "=== Crontab in $FILE ==="
            cat $FILE | grep -v '^#' | grep -v '^[[:space:]]*$'
            echo ""
        fi
    done
}

# Call the function
#cron_list_system


function list_users() {
  # Get a list of all manually created users
  users=$(awk -F':' '$3 >= 1000 && $1 != "nobody" { print $1 }' /etc/passwd)
  echo $users
}
function list_users_system() {
  # Get a list of all manually created users
  users=$(awk -F':' '$3 <= 1000 { print $1 }' /etc/passwd)
  echo $users
}


function check_ssd_hdd() {
    # Get list of block devices excluding loop devices
    devices=$(lsblk -d -n -o name | grep -v '^loop')
    # Iterate through each device
    while IFS= read -r device; do
        rota=$(lsblk -d -o rota "/dev/$device" | awk 'NR>1 {print $1}')
        if [ "$rota" -eq 1 ]; then
            echo "/dev/$device is a HDD"
        elif [ "$rota" -eq 0 ]; then
            echo "/dev/$device is an SSD"
        else
            echo "Unable to determine type for /dev/$device"
        fi
    done <<< "$devices"
}

# Start services
start() {
  if [ $# -eq 0 ]; then
    echo "Usage: start <service>"
    return 1
  fi
  sudo systemctl start "$@"
}


# Stop services
stop() {
  if [ $# -eq 0 ]; then
    echo "Usage: stop <service>"
    return 1
  fi
  sudo systemctl stop "$@"
}


# Status services
status() {
  if [ $# -eq 0 ]; then
    echo "Usage: status <service>"
    return 1
  fi
  sudo systemctl status "$@"
}
