#=======================================
#    Ibrar Ansari Path
#=======================================
export IROOT=/ansari
export IHOME=/home/iansari

# Case-insensitive globbing (used in pathname expansion)
#shopt -s nocaseglob

# Autocorrect typos in path names when using `cd`
#shopt -s cdspell

# This will ensure that multiple line commands stay together in your history.
#shopt -s cmdhist

# Update dot files
alias update_dotfiles='current_dir=$(pwd); clear >$(tty) && cd ~/bin/dotfiles && git pull && cd "$current_dir" && source ~/.bash_profile'

# Uninstall dot files
alias uninstall_dotfiles='current_dir=$(pwd); clear >$(tty) && rm -rf ~/bin && sed -i "/\. ~\/bin\/dotfiles\/bashrc/d" ~/.bashrc && bash && cd "$current_dir" && source ~/.bash_profile && bash'

unalias docs &> /dev/null # unalias any alias
alias reload='source ~/.bash_profile && source ~/.bashrc'
alias linux_help="grep 'alias' ~/bin/dotfiles/linux/linux | sed 's/alias //'"
alias docker_help="grep 'alias' ~/bin/dotfiles/docker/docker | sed 's/alias //'"
alias git_help="grep 'alias' ~/bin/dotfiles/git/git | sed 's/alias //'"
alias k8s_help="grep 'alias' ~/bin/dotfiles/kubernetes/kubernetes | sed 's/alias //'"
alias ansible_help="grep 'alias' ~/bin/dotfiles/ansible/ansible | sed 's/alias //'"
alias compose_help="grep 'alias' ~/bin/dotfiles/docker/docker_compose | sed 's/alias //'"

# Auto update dotfiles
# Check if the dotfiles repository exists
current_dir=$(pwd)
if [ -d "$HOME/bin/dotfiles" ]; then
    # Change directory to dotfiles
    cd "$HOME/bin/dotfiles"

    # Fetch the latest changes from the Git repository silently
    git fetch origin main > /dev/null 2>&1

    # Compare the local branch with the remote branch
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u})
	#echo $LOCAL
	#echo $REMOTE
    if [ "$LOCAL" != "$REMOTE" ]; then
        # Pull the latest changes from the Git repository silently if updates are available
        git pull > /dev/null 2>&1
	fi
fi
cd "$current_dir"



function pwdgen() {
#=======================================
# Password generator with lenght option
#=======================================
NOCOLOR='\e[0m'
BOLD='\e[1m'
BLINK='\e[5m'
Blue='\e[44m'

# Ask user for the string length
clear
printf "\n"
read -p "How many characters you would like the password to have? " pass_lenght
printf "\n"

# This is where the magic happens!
# Generate a list of 10 strings and cut it to the desired value provided from the user
#for i in {1..10}; do (tr -cd '[:alnum:]' < /dev/urandom | fold -w${pass_lenght} | head -n 1); done
#tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c ${pass_lenght}  ; echo

for i in {1..10}; do (tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c ${pass_lenght}  ; echo); done

# Print the strings
echo ""
echo -e "${Blue}${BLINK}${BOLD}Goodbye, ${USER}${NOCOLOR}"
echo ""
echo ""
}

function pwdgen_sql() {
#=======================================
# Password generator for mysql
#=======================================
NOCOLOR='\e[0m'
BOLD='\e[1m'
BLINK='\e[5m'
Blue='\e[44m'

# Ask user for the string length
clear
printf "\n"
read -p "How many characters you would like the password to have? " pass_lenght
printf "\n"

# This is where the magic happens!
# Generate a list of 10 strings and cut it to the desired value provided from the user
#for i in {1..10}; do (tr -cd '[:alnum:]' < /dev/urandom | fold -w${pass_lenght} | head -n 1); done
#tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c ${pass_lenght}  ; echo
for i in {1..10}; do (tr -dc 'A-Za-z0-9:@.,/+!=-' </dev/urandom | head -c ${pass_lenght}  ; echo); done

# Print the strings
echo ""
echo -e "${Blue}${BLINK}${BOLD}Goodbye, ${USER}${NOCOLOR}"
echo ""
echo ""
}



#!/bin/bash

svc_custom() {
    excluded_patterns=(
        "^accounts-daemon\.service$" "^atd\.service$" "^cron\.service$" "^dbus\.service$"
        "^getty@tty1\.service$" "^irqbalance\.service$" "^ModemManager\.service$"
        "^multipathd\.service$" "^networkd-dispatcher\.service$" "^open-vm-tools\.service$"
        "^polkit\.service$" "^rsyslog\.service$" "^snapd\.service$" "^ssh\.service$"
        "^systemd-journald\.service$" "^systemd-logind\.service$" "^systemd-networkd\.service$"
        "^systemd-resolved\.service$" "^systemd-timesyncd\.service$" "^systemd-udevd\.service$"
        "^udisks2\.service$" "^unattended-upgrades\.service$" "^upower\.service$"
        "^user@1000\.service$" "^uuidd\.service$" "^vgauth\.service$"
        "^apparmor\.service$" "^apport\.service$" "^blk-availability\.service$"
        "^cloud-config\.service$" "^cloud-final\.service$" "^cloud-init-local\.service$"
        "^cloud-init\.service$" "^console-setup\.service$" "^finalrd\.service$"
        "^fwupd\.service$" "^keyboard-setup\.service$" "^kmod-static-nodes\.service$"
        "^lvm2-monitor\.service$" "^packagekit\.service$" "^setvtrgb\.service$"
        "^snapd\.apparmor\.service$" "^snapd\.seeded\.service$" "^sysstat\.service$"
        "^systemd-journal-flush\.service$" "^systemd-modules-load\.service$"
        "^systemd-networkd-wait-online\.service$" "^systemd-random-seed\.service$"
        "^systemd-remount-fs\.service$" "^systemd-sysctl\.service$"
        "^systemd-sysusers\.service$" "^systemd-tmpfiles-setup-dev\.service$"
        "^systemd-tmpfiles-setup\.service$" "^systemd-udev-settle\.service$"
        "^systemd-udev-trigger\.service$" "^systemd-update-utmp\.service$"
        "^systemd-user-sessions\.service$" "^ubuntu-fan\.service$" "^ufw\.service$"
        "^user-runtime-dir@1000\.service$" "^plymouth-quit-wait\.service$"
        "^plymouth-quit\.service$" "^plymouth-read-write\.service$"
        "^systemd-binfmt\.service$" "^systemd-tmpfiles-setup-dev-early\.service$"
        "^chrony\.service$" "^serial-getty@ttyS0\.service$" "^systemd-fsck-root\.service$"
        "^systemd-fsck@dev-disk-by-.*\.service$" "^systemd-machine-id-commit\.service$"
        "^google-guest-agent\.service$" "^google-osconfig-agent\.service$" "^google-shutdown-scripts\.service$"
        "^ensure-gss-startup-order\.service$" "^acpid\.service$" "^snap\.amazon-ssm-agent\.amazon-ssm-agent\.service$"
        "^alsa-restore\.service$" "^avahi-daemon\.service$" "^cups-browsed\.service$" "^cups\.service$" "^gdm\.service$"
        "^kerneloops\.service$" "^NetworkManager-wait-online\.service$" "^NetworkManager\.service$" "^openvpn\.service$"
        "^plymouth-start\.service$" "^power-profiles-daemon\.service$" "^rtkit-daemon\.service$" "^switcheroo-control\.service$"
        "^systemd-oomd\.service$" "^thermald\.service$" "^wpa_supplicant\.service$"
        "^named\.service$"
    )

    active_services=$(systemctl list-units --state=active --type=service --no-pager --no-legend | awk '{print $1}')

    for service in $active_services; do
        excluded=false
        for pattern in "${excluded_patterns[@]}"; do
            if [[ $service =~ $pattern ]]; then
                excluded=true
                break
            fi
        done

        if [[ $excluded == false ]]; then
            echo "$service"
        fi
    done
}

# Call the function to list active services except those excluded
#svc_custom



